# -*- coding: utf-8 -*-
"""streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tYxY5PrsuM9yk4j-qBVWjkgZ8i7DegBy
"""

import streamlit as st
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import networkx as nx

# Load dataset from local directory
df = pd.read_csv('career_ao_star_dataset.csv')

# Encode categorical columns
label_encoders = {}
for column in df.columns:
    if df[column].dtype == 'object':
        le = LabelEncoder()
        df[column] = le.fit_transform(df[column])
        label_encoders[column] = le

# A* style career recommendation based on user input
def a_star_search(education, skills, interest):
    node = {'Education': education, 'Skills': skills, 'Interest': interest}
    career_scores = {
        "Engineer": (education == "Science" and interest == "Technology" and skills == "High"),
        "Programmer": (education == "Science" and interest == "Technology" and skills == "Medium"),
        "Banker": (education == "Commerce" and interest == "Finance" and skills == "High"),
        "Manager": (education == "Commerce" and interest == "Finance" and skills == "Medium"),
        "Artist": (education == "Humanities" and interest == "Arts" and skills == "Low"),
        "Writer": (education == "Humanities" and interest == "Arts" and skills == "High"),
    }

    # Calculate scores for each career
    scores = {career: score for career, score in career_scores.items()}
    
    # Visualize career scores as a bar graph
    careers = list(scores.keys())
    score_values = list(scores.values())
    
    # Plot the bar chart using matplotlib
    plt.bar(careers, score_values, color='skyblue')
    plt.xlabel('Careers')
    plt.ylabel('Scores')
    plt.title('Career Recommendation Scores')
    st.pyplot(plt)  # Display the chart in Streamlit

    best_career = max(scores, key=scores.get)
    return best_career

# Graph visualization using networkx
def visualize_graph():
    # Create a graph using networkx
    G = nx.Graph()  # Undirected graph
    G.add_edges_from([(1, 2), (2, 3), (3, 4), (4, 1), (1, 3)])
    
    # Create a layout for the graph
    pos = nx.spring_layout(G)
    
    # Draw the graph
    nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=3000, font_size=15, font_weight='bold')
    plt.title('Career Recommendation Process - Graph Visualization')
    st.pyplot(plt)  # Display the graph in Streamlit

# Streamlit interface
def career_advisor():
    st.title("Career Recommendation - A* Search")
    
    # Input fields for user
    education = st.selectbox('Select Education Level:', ['Science', 'Commerce', 'Humanities'])
    skills = st.selectbox('Select Skills Level:', ['High', 'Medium', 'Low'])
    interest = st.selectbox('Select Area of Interest:', ['Technology', 'Finance', 'Arts'])
    
    # Display recommended career
    recommended_career = a_star_search(education, skills, interest)
    st.write(f"ðŸŽ¯ Recommended Career: {recommended_career}")

    # Show the graph visualization
    visualize_graph()

if __name__ == "__main__":
    career_advisor()
